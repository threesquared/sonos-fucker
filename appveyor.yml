environment:
  global:
    RUST_VERSION: nightly
    CRATE_NAME: sonos-sabotage
  matrix:
    - TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu
    - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc
install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V
test_script:
  - if [%APPVEYOR_REPO_TAG%]==[false] (
    cargo build --target %TARGET% &&
    cargo build --target %TARGET% --release
    cargo test --target %TARGET% &&
    cargo test --target %TARGET% --release &&
    )
before_deploy:
  - cargo rustc --target %TARGET% --release --bin sonos-sabotage -- -C lto
  - ps: ci\before_deploy.ps1
deploy:
  artifact: /.*\.zip/
  auth_token:
    secure: Qqi/y37trm84VUvBa07suT7hT8HPq850xXrxbNQ7tUl6+Yrza/xCf9O3YSR7r7gd
  description: ''
  on:
    appveyor_repo_tag: true
  provider: GitHub
cache:
  - C:\Users\appveyor\.cargo\registry
  - target
branches:
  only:
    - /^\d+\.\d+\.\d+.*$/
build: false
